To create a system that predicts whether a person would survive the sinking of the Titanic, we need to perform the following steps:

1. **Data Collection and Preparation**:
   - Use a dataset that contains information about the passengers of the Titanic, such as their socio-economic status (class), age, gender, fare, etc.
   - Clean the data by handling missing values, encoding categorical variables, and normalizing numerical features.

2. **Feature Selection**:
   - Identify which features are most important for predicting survival. Common features include:
     - `Pclass` (Passenger Class)
     - `Sex` (Gender)
     - `Age`
     - `SibSp` (Number of siblings/spouses aboard)
     - `Parch` (Number of parents/children aboard)
     - `Fare`
     - `Embarked` (Port of Embarkation)

3. **Model Selection and Training**:
   - Split the data into training and testing sets.
   - Train a machine learning model (e.g., Logistic Regression, Decision Tree, Random Forest, or Gradient Boosting) on the training set.
   - Evaluate the model using the testing set.

4. **Feature Importance Analysis**:
   - Determine the importance of each feature in predicting survival using model-specific methods (e.g., feature importance scores in tree-based models or coefficients in logistic regression).

5. **Prediction System**:
   - Create a system that takes input features for a passenger and predicts whether they would survive.

Here is an implementation in Python using the Titanic dataset from Kaggle:

### Step 1: Data Collection and Preparation
First, let's load and preprocess the dataset.

```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the dataset
data = pd.read_csv('titanic.csv')

# Handle missing values
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)
data.drop(columns=['Cabin', 'Ticket', 'Name'], inplace=True)

# Encode categorical variables
label_encoder = LabelEncoder()
data['Sex'] = label_encoder.fit_transform(data['Sex'])
data['Embarked'] = label_encoder.fit_transform(data['Embarked'])

# Define features and target variable
features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']
X = data[features]
y = data['Survived']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
```

### Step 2: Model Selection and Training
Let's train a Random Forest classifier.

```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Classification Report:")
print(report)
```

### Step 3: Feature Importance Analysis
Analyze the feature importance scores.

```python
import matplotlib.pyplot as plt

# Get feature importance
importances = model.feature_importances_
feature_names = features

# Plot feature importance
plt.figure(figsize=(10, 6))
plt.barh(feature_names, importances)
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.title('Feature Importance in Predicting Titanic Survival')
plt.show()
```

### Step 4: Prediction System
Create a function that takes passenger details and predicts survival.

```python
def predict_survival(pclass, sex, age, sibsp, parch, fare, embarked):
    # Encode and scale input features
    input_data = pd.DataFrame([[pclass, sex, age, sibsp, parch, fare, embarked]], columns=features)
    input_data['Sex'] = label_encoder.transform(input_data['Sex'])
    input_data['Embarked'] = label_encoder.transform(input_data['Embarked'])
    input_data = scaler.transform(input_data)
    
    # Predict survival
    prediction = model.predict(input_data)
    return "Survived" if prediction[0] == 1 else "Not Survived"

# Example prediction
print(predict_survival(3, 'male', 22, 1, 0, 7.25, 'S'))
```





This code will give you a basic framework for predicting Titanic survival based on various features. You can further refine the model by experimenting with different algorithms, feature engineering techniques,
and hyperparameter tuning.
